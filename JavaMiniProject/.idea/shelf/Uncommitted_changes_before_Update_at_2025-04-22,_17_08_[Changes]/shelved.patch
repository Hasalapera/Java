Index: src/Admin/AddNotices.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Admin;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport database.DatabaseConnection;\nimport database.Session;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\n\n\n\npublic class AddNotices {\n    public JPanel MainPanel;\n    private JTextField textField1;\n    private JTextField textField2;\n    private JTextField textField3;\n    private JTextField textField4;\n    private JButton addNoticeButton;\n    private JButton clearButton;\n\n    public AddNotices() {\n\n\n        addNoticeButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                String noticeId = textField1.getText().trim();\n//                String adminId = textField2.getText().trim();\n                String title = textField3.getText().trim();\n                String date = textField4.getText().trim();\n//                String adId = Session.loggedInUsername; // assuming Session class has this\n                String adId = \"Admin01\";\n\n\n\n                if (noticeId.isEmpty() || title.isEmpty() || date.isEmpty() ) {\n                    JOptionPane.showMessageDialog(null, \"Please fill all fields!\");\n                    return;\n                }\n\n                /*if (!date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {\n                    JOptionPane.showMessageDialog(null, \"Please enter a valid date (YYYY-MM-DD)\");\n                    return;\n                }*/\n\n                try {\n//                    String trimmedDate = date.trim(); // extra trimming\n                    String trimmedDate = date.trim().replaceAll(\"[\\\\n\\\\r\\\\t]\", \"\"); // strip newlines, tabs\n                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n                    LocalDate parsedDate = LocalDate.parse(trimmedDate, formatter); // this will throw if invalid\n                    date = parsedDate.toString();\n                } catch (DateTimeParseException ex) {\n                    JOptionPane.showMessageDialog(null, \"Invalid date! Please enter a correct date in YYYY-MM-DD format.\");\n                    return;\n                }\n\n\n                // 1. Insert into database\n                try {\n                    Connection conn = DatabaseConnection.connect();\n                    String sql = \"INSERT INTO notice (Notice_id, Ad_id, Title, Date) VALUES (?, ?, ?, ?)\";\n                    PreparedStatement stmt = conn.prepareStatement(sql);\n                    stmt.setString(1, noticeId);\n                    stmt.setString(2, adId);\n                    stmt.setString(3, title);\n                    stmt.setString(4, date);\n                    int rows = stmt.executeUpdate();\n\n\n\n\n                    if (rows > 0) {\n                        // 2. Create notice file\n                        File dir = new File(\"notices\");\n                        if (!dir.exists()) dir.mkdirs(); // Create directory if it doesn't exist\n                        File file = new File(dir, \"notice\" + noticeId + \".txt\");\n                        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {\n                            writer.write(\"Title: \" + title);\n                            writer.newLine();\n                            writer.write(\"Date: \" + date);\n                            writer.newLine();\n                            writer.write(\"Content:\");\n                            writer.newLine();\n//                            writer.write(content);\n                        }\n\n                        JOptionPane.showMessageDialog(null, \"Notice added successfully!\");\n                        clearFields();\n                    } else {\n                        JOptionPane.showMessageDialog(null, \"Failed to add notice.\");\n                    }\n\n                    stmt.close();\n                    conn.close();\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                    JOptionPane.showMessageDialog(null, \"Error: \" + ex.getMessage());\n                }\n            }\n        });\n\n        clearButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                clearFields();\n            }\n        });\n    }\n\n    private void clearFields() {\n        textField1.setText(\"\");\n        textField2.setText(\"\");\n        textField3.setText(\"\");\n        textField4.setText(\"\");\n    }\n\n    public JPanel getMainPanel() {\n        return MainPanel;\n    }\n\n\n\n    public static void main(String[] args) {\n        // Create the JFrame (window)\n        JFrame frame = new JFrame(\"Add Notices\");\n        frame.setContentPane(new AddNotices().getMainPanel());\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.pack(); // Adjust size to fit content\n        frame.setLocationRelativeTo(null); // Center on screen\n        frame.setVisible(true);\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Admin/AddNotices.java b/src/Admin/AddNotices.java
--- a/src/Admin/AddNotices.java	(revision 9806ab11c8be08ff22efec49797379806b8f430f)
+++ b/src/Admin/AddNotices.java	(date 1745319873697)
@@ -78,7 +78,7 @@
                         // 2. Create notice file
                         File dir = new File("notices");
                         if (!dir.exists()) dir.mkdirs(); // Create directory if it doesn't exist
-                        File file = new File(dir, "notice" + noticeId + ".txt");
+                        File file = new File(dir, "notice_" + noticeId + ".txt");
                         try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                             writer.write("Title: " + title);
                             writer.newLine();
Index: src/Lecture/Lec_profileupdate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Lecture;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Lec_profileupdate extends JFrame {\n    private JPanel mainPanel;\n    private JLabel updateProfileMainLbl;\n    private JPanel detailPanel;\n    private JLabel firstNameLbl;\n    private JTextField firstNameTxt;\n    private JLabel lastNameLbl;\n    private JTextField lastNameTxt;\n    private JLabel addressLbl;\n    private JLabel emailLbl;\n    private JLabel pNoLbl;\n    private JTextField addressTxt;\n    private JTextField emailTxt;\n    private JTextField pNoTxt;\n    private JTextField proPicTxt;\n    private JButton uploadAnImageButton;\n    private JButton updateProfileButton;\n    private JButton cancelButton;\n\n    public Lec_profileupdate() {\n        setContentPane(mainPanel);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setTitle(\"Student Home\");\n        setSize(1024, 768);\n        setLocationRelativeTo(null);\n        setVisible(true);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lecture/Lec_profileupdate.java b/src/Lecture/Lec_profileupdate.java
--- a/src/Lecture/Lec_profileupdate.java	(revision 9806ab11c8be08ff22efec49797379806b8f430f)
+++ b/src/Lecture/Lec_profileupdate.java	(date 1745321807717)
@@ -2,6 +2,8 @@
 
 import javax.swing.*;
 import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
 
 public class Lec_profileupdate extends JFrame {
     private JPanel mainPanel;
@@ -29,5 +31,11 @@
         setSize(1024, 768);
         setLocationRelativeTo(null);
         setVisible(true);
+        uploadAnImageButton.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+
+            }
+        });
     }
 }
Index: src/Technical_officer/updateTOprofile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Technical_officer;\n\nimport database.DatabaseConnection;\nimport database.Session;\nimport student.StuHome;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\n\npublic class updateTOprofile extends JFrame {\n    private JPanel mainPanel;\n    private JLabel updateProfileMainLbl;\n    private JPanel detailPanel;\n    private JLabel firstNameLbl;\n    private JTextField firstNameTxt;\n    private JLabel lastNameLbl;\n    private JTextField lastNameTxt;\n    private JLabel addressLbl;\n    private JLabel emailLbl;\n    private JLabel pNoLbl;\n    private JTextField addressTxt;\n    private JTextField emailTxt;\n    private JTextField pNoTxt;\n    private JTextField proPicTxt;\n    private JButton uploadAnImageButton;\n    private JButton updateProfileButton;\n    private JButton cancelButton;\n\n    public updateTOprofile() {\n\n        setContentPane(mainPanel);\n        setTitle(\"Update to Profile\");\n        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n        setLocationRelativeTo(null);\n        setSize(2000, 1000);\n        setVisible(true);\n\n        uploadAnImageButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                uploadProfilePicture();\n            }\n        });\n        updateProfileButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.out.println(\"Update Profile Button pressed\");\n                updateStudentDetails();\n            }\n        });\n        cancelButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new toHome();\n                dispose();\n            }\n        });\n    }\n    public void updateStudentDetails() {\n        String firstName = firstNameTxt.getText();\n        String lastName = lastNameTxt.getText();\n        String address = addressTxt.getText();\n        String email = emailTxt.getText();\n        String pNo = pNoTxt.getText();\n        String proPic = proPicTxt.getText();\n\n        Connection con = null;\n        PreparedStatement pst = null;\n        ResultSet rs = null;\n\n        try{\n            con = DatabaseConnection.connect();\n            String sql = \"UPDATE User SET FName = ?, LName = ?, Address = ?, Email = ?, Phone_No = ?, ProfilePic = ? WHERE UserName = ?\";\n            pst = con.prepareStatement(sql);\n\n            pst.setString(1, firstName);\n            pst.setString(2, lastName);\n            pst.setString(3, address);\n            pst.setString(4, email);\n            pst.setString(5, pNo);\n            pst.setString(6, proPic);\n            pst.setString(6, Session.loggedInUsername);\n\n            int i = pst.executeUpdate();\n\n            if(i>0){\n                JOptionPane.showMessageDialog(null, \"Student Profile Updated\");\n            }else{\n                JOptionPane.showMessageDialog(null, \"Student Profile Not Updated\");\n            }\n        }catch (Exception e){\n            JOptionPane.showMessageDialog(null, \"User Update Failed\");\n        }\n    }\n\n    public void uploadProfilePicture() {\n        JFileChooser fileChooser = new JFileChooser();\n        fileChooser.setDialogTitle(\"Select Profile Picture\");\n\n        // Optional: allow only image files\n        fileChooser.setAcceptAllFileFilterUsed(false);\n        fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(\"Image Files\", \"jpg\", \"jpeg\", \"png\", \"gif\"));\n\n        int result = fileChooser.showOpenDialog(this);\n\n        if (result == JFileChooser.APPROVE_OPTION) {\n            File selectedFile = fileChooser.getSelectedFile();\n            String imagePath = selectedFile.getAbsolutePath();\n\n            // Set the selected file path into the text field\n            proPicTxt.setText(imagePath);\n        }\n    }\n\n    public static void main(String[] args) {\n        new updateTOprofile();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Technical_officer/updateTOprofile.java b/src/Technical_officer/updateTOprofile.java
--- a/src/Technical_officer/updateTOprofile.java	(revision 9806ab11c8be08ff22efec49797379806b8f430f)
+++ b/src/Technical_officer/updateTOprofile.java	(date 1745321807726)
@@ -119,6 +119,7 @@
     }
 
     public static void main(String[] args) {
+
         new updateTOprofile();
     }
 }
Index: src/student/StuHome.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package student;\n\nimport database.DatabaseConnection;\nimport database.Session;\n\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n//import net.proteanit.sql.DbUtils;\n\n\npublic class StuHome extends JFrame {\n    private JPanel mainPanel;\n    private JPanel headingPanel;\n    private JPanel btnPanel;\n    private JPanel cardMainPanel;\n    private JButton profileButton;\n    private JButton coursesButton;\n    private JButton gradeAndGPAButton;\n    private JButton attendanceButton;\n    private JButton medicalButton;\n    private JButton timeTableButton;\n    private JTextField fNameTxt;\n    private JTextField lNameTxt;\n    private JTextField addressTxt;\n    private JTextField emailTxt;\n    private JTextField pNoTxt;\n    private JTextField roleTxt;\n    private JPanel imgMainPanel;\n    private JPanel imgPanel;\n    private JLabel roleLbl;\n    private JLabel pNoLbl;\n    private JLabel emailLbl;\n    private JLabel addressLbl;\n    private JLabel lNameLbl;\n    private JLabel fNameLbl;\n    private JPanel detailPanel;\n    private JLabel profileHeadingLbl;\n    private JPanel profileCard;\n    private JLabel imageLbl;\n    private JButton noticeButton;\n    private JLabel stuManaSysLbl;\n    private JLabel FoTLbl;\n    private JPanel coursesCard;\n    private JLabel CoursesHeadingLbl;\n    private JComboBox comboBoxCourses;\n    private JLabel selectCourseLbl;\n    private JPanel gradeGPACard;\n    private JLabel gradeGPAHeadingLbl;\n    private JComboBox selectCrsComboBox;\n    private JTextField yourGradeTxt;\n    private JTextField sgpaTxt;\n    private JTextArea gradetxtArea;\n    private JPanel gradeTxtAreaPanel;\n    private JLabel yourGradeLbl;\n    private JLabel selectCrsLbl;\n    private JLabel sgpaLbl;\n    private JButton logOutButton;\n    private JPanel attendanceCard;\n    private JPanel medicalCard;\n    private JPanel timeTableCard;\n    private JPanel noticeCard;\n    private JLabel attendanceHeadingLbl;\n    private JLabel medicalHeadingLbl;\n    private JLabel noticeHeadingLbl;\n    private JComboBox selectAttCourseCombo;\n    private JComboBox selectCrsTypeCombo;\n    private JLabel selectAttCourseLbl;\n    private JButton clearButton;\n    private JButton OKButton;\n    private JPanel attViewPanel;\n    private JTable mediDetailsTable;\n    private JPanel mediDetailsTblPanel;\n    private JComboBox selectTitleCombo;\n    private JLabel selectTitleLbl;\n    private JLabel timeTableHeadingLbl;\n    private JPanel noticeTxtAreaPanel;\n    private JTextArea noticeTxtArea;\n    private JPanel timeTablePanel;\n    private JTable timeTableTable;\n    private JTable attTable;\n    private JScrollPane attScrollPane;\n    private JScrollPane mediScrollPane;\n    private JScrollPane noticeScrollPane;\n    private JScrollPane timeTableScrollPane;\n    private JButton updateProfileButton;\n    private JTable table1;\n    private JButton updateTimeTableButton;\n    private JButton addButton;\n    private JButton checkEligibilityButton;\n    private JButton checkAttendanceEligibilityButton;\n    private JButton deleteProfilePictureButton;\n    private JButton okButtonCourses;\n\n    private JPanel displayDetailsPanel;\n\n\n//    private String[] courseCodes = {\n//            \"ICT2113\",  // Index 0\n//            \"ICT2122\",  // Index 1\n//            \"ICT2132\",  // Index 2\n//            \"ICT2142\",  // Index 3\n//            \"ICT2152\"   // Index 4\n//    };\n\n    Connection con;\n    PreparedStatement pst;\n    ResultSet rs;\n\n\n    public StuHome() {\n//        JFrame frame = new JFrame(\"Student Management System - Home\");\n        setContentPane(mainPanel);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setTitle(\"Student Home\");\n        setSize(2000, 1000);\n        setLocationRelativeTo(null);\n        setVisible(true);\n\n        displayProfileDetails();\n        showProfilePicture(imageLbl);\n//        getAllAttendanceCounts();\n\n        CardLayout cardLayout = (CardLayout) (cardMainPanel.getLayout());\n\n        // Button actions to switch cards\n        profileButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.out.println(\"hi\");\n                cardLayout.show(cardMainPanel, \"profileCard\");\n            }\n        });\n\n        coursesButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                cardLayout.show(cardMainPanel, \"coursesCard\");\n\n            }\n        });\n\n        gradeAndGPAButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                cardLayout.show(cardMainPanel, \"gradeGPACard\");\n                getSGPA();\n            }\n        });\n\n        attendanceButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                cardLayout.show(cardMainPanel, \"attendanceCard\");\n            }\n        });\n\n        medicalButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                cardLayout.show(cardMainPanel, \"medicalCard\");\n\n                String[] mediStatus = {\"Medical_id\", \"Course_code\", \"Course_name\", \"Week_No\", \"Day_No\", \"Status\"};\n                DefaultTableModel model = new DefaultTableModel(null, mediStatus);\n                mediDetailsTable.setModel(model);\n                viewMedicalStatus();\n            }\n        });\n\n        timeTableButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                cardLayout.show(cardMainPanel, \"timeTableCard\");\n                showTimeTable();\n            }\n        });\n\n        noticeButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                cardLayout.show(cardMainPanel, \"noticeCard\");\n                addNoticeTitlesToComboBox();\n            }\n        });\n\n\n        updateProfileButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new UpdateStudentProfile();\n                dispose();\n            }\n        });\n        logOutButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                String password = \"\"                        ;\n                new Login();\n            }\n        });\n        selectCrsComboBox.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                int selectedIndex = selectCrsComboBox.getSelectedIndex();\n\n//                String selectedCourseCode = courseCodes[selectedIndex];\n                List<String> courseCodes = getAllCourseCodes();\n\n                getGrade(courseCodes.get(selectedIndex));\n            }\n        });\n\n        selectTitleCombo.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // Get the selected title\n                String selectedTitle = (String) selectTitleCombo.getSelectedItem();\n                System.out.println(\"Selected Title: \" + selectedTitle);\n                // Display the content for the selected title\n                if (selectedTitle != null) {\n                    displayNoticeContent(selectedTitle);\n                }\n            }\n        });\n        checkEligibilityButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new ShowCAEligibility();\n//                dispose();\n            }\n        });\n        selectAttCourseCombo.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                int selectedIndex = selectAttCourseCombo.getSelectedIndex();\n//                String selectedCourseCode = courseCodes[selectedIndex];\n                List<String> selectedCourseCodes = getAllCourseCodes();\n                System.out.println(\"Selected CourseCode: \" + selectedCourseCodes.get(selectedIndex));\n            }\n        });\n\n        OKButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                int selectedIndex = selectAttCourseCombo.getSelectedIndex();\n                if (selectedIndex >= 0) {\n//                    String selectedCourseCode = courseCodes[selectedIndex];\n                    List<String> selectedCourseCodes = getAllCourseCodes();\n                    System.out.println(\"Selected CourseCode: \" + selectedCourseCodes.get(selectedIndex));\n                    viewAttendance(selectedCourseCodes.get(selectedIndex));\n                }else {\n                    JOptionPane.showMessageDialog(null, \"Please select a course\");\n                }\n            }\n        });\n        clearButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                //Reset ComboBox selection to no selection\n                selectAttCourseCombo.setSelectedIndex(0);  // or 0 if you want the first item\n\n                //Clear the table model (remove all data)\n                DefaultTableModel model = new DefaultTableModel(\n                        new String[]{\"Attendance Id\", \"Lecture Hour\", \"Week No\", \"Day No\", \"Status\", \"Course Type\"}, 0\n                );\n                attTable.setModel(model);\n            }\n        });\n//        checkAttendanceEligibilityButton.addActionListener(new ActionListener() {\n//            @Override\n//            public void actionPerformed(ActionEvent e) {\n//\n//            }\n//        });\n        checkAttendanceEligibilityButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                new ShowAttendanceEligibility();\n                dispose();\n            }\n        });\n        deleteProfilePictureButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                deleteProfilePicture(imageLbl);\n                deleteProfilePictureButton.setEnabled(false);\n            }\n        });\n\n\n        comboBoxCourses.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                int SelectedIndex = comboBoxCourses.getSelectedIndex();\n                List<String> selectedCourseCodeForMaterials = getAllCourseCodes();\n                System.out.println(\"Selected CourseCode: \" + selectedCourseCodeForMaterials.get(SelectedIndex));\n//                getGrade(selectedCourseCodeForMaterials.get(SelectedIndex));\n            }\n        });\n        okButtonCourses.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                int selectedIndex = comboBoxCourses.getSelectedIndex();\n                if (selectedIndex >= 0) {\n//                    String selectedCourseCode = courseCodes[selectedIndex];\n                    List<String> selectedCourseCodeForMaterials = getAllCourseCodes();\n                    String selectedCourseCode = selectedCourseCodeForMaterials.get(selectedIndex);\n                    System.out.println(\"Selected CourseCode: \" + selectedCourseCodeForMaterials.get(selectedIndex));\n                    viewCourseMaterials(selectedCourseCode);\n                }else {\n                    JOptionPane.showMessageDialog(null, \"Please select a course\");\n                }\n            }\n        });\n    }\n\n    // ******* Grade & GPA *****************\n\n    public void getSGPA(){\n        Connection con = null;\n        CallableStatement cstmt = null;\n        ResultSet rs = null;\n\n        try{\n            con = DatabaseConnection.connect();\n            String sql = \"{CALL Calculate_SGPA_For_Student(?)}\";\n            cstmt = con.prepareCall(sql);\n\n            cstmt.setString(1, Session.loggedInUsername);\n\n            rs = cstmt.executeQuery();\n\n            if(rs.next()){\n                double sgpa = rs.getDouble(\"SGPA\");\n                System.out.println(\"SGPA retrieved: \" + sgpa);\n\n                sgpaTxt.setText(String.format(\"%.2f\", sgpa));\n            }else{\n                JOptionPane.showMessageDialog(null, \"No SGPA Found\");\n            }\n\n        } catch (Exception e) {\n            System.out.println(\"error\");\n        }finally {\n            // Close resources properly\n            try {\n                if (rs != null) rs.close();\n                if (cstmt != null) cstmt.close();\n                if (con != null) con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void getGrade(String courseCode){\n        Connection con = null;\n        CallableStatement cstmt = null;\n        ResultSet rs = null;\n\n        try {\n            con = DatabaseConnection.connect();\n//            String sql = \"{CALL GetGradeByStudentAndCourse (?, ?)}\";\n            String sql = \"{CALL Get_Grade_By_Course_And_Student(?, ?)}\";\n            cstmt = con.prepareCall(sql);\n\n            cstmt.setString(1, courseCode);\n            cstmt.setString(2, Session.loggedInUsername);\n\n            rs = cstmt.executeQuery();\n\n            if(rs.next()){\n                String grade = rs.getString(\"Grade\");\n                yourGradeTxt.setText(grade);\n\n                System.out.println(\"Course Code: \" + courseCode + \" | Grade: \" + grade); // Print to console\n\n            } else {\n                JOptionPane.showMessageDialog(null, \"No Grades Found\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error in getting grade: \" + e.getMessage());\n            e.printStackTrace();  // This will print the full stack trace to the console\n        } finally {\n            // Close resources to avoid memory leaks\n            try {\n                if (rs != null) rs.close();\n                if (cstmt != null) cstmt.close();\n                if (con != null) con.close();\n            } catch (SQLException se) {\n                System.out.println(\"Error closing resources: \" + se.getMessage());\n            }\n        }\n    }\n\n    // ******* Display Profile Details *****************\n\n    public void displayProfileDetails(){\n        con = DatabaseConnection.connect();\n\n        try {\n            String sql = \"SELECT FName, LName, Address, Email, Phone_No, Role FROM User WHERE UserName = ?\";\n            PreparedStatement pstmt = con.prepareStatement(sql);\n\n            pstmt.setString(1, Session.loggedInUsername);\n\n            ResultSet rs = pstmt.executeQuery();\n\n            if(rs.next()){\n                String fName1 = rs.getString(\"FName\");\n                fNameTxt.setText(fName1);\n                System.out.println(\"fName1: \" + fName1);\n                String lName1 = rs.getString(\"LName\");\n                lNameTxt.setText(lName1);\n                System.out.println(\"lName1: \" + lName1);\n                String address1 = rs.getString(\"Address\");\n                addressTxt.setText(address1);\n                System.out.println(\"address1: \" + address1);\n                String email1 = rs.getString(\"Email\");\n                emailTxt.setText(email1);\n                System.out.println(\"email1: \" + email1);\n                String phoneNo1 = rs.getString(\"Phone_No\");\n                pNoTxt.setText(phoneNo1);\n                System.out.println(\"phoneNo1: \" + phoneNo1);\n                String role1 = rs.getString(\"Role\");\n                roleTxt.setText(role1);\n                System.out.println(\"role1: \" + role1);\n\n            }else {\n                JOptionPane.showMessageDialog(null, \"No Profile Found\");\n            }\n        }catch (Exception e){\n            System.out.println(\"Error in display Profile Details: \" + e.getMessage());\n        }\n    }\n\n    // ******* Time Table *****************\n\n    public void showTimeTable() {\n        con = DatabaseConnection.connect();\n\n        try {\n            String sql = \"SELECT * FROM TimeTable\";\n            PreparedStatement pstmt = con.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n\n            String[] columnNames = {\"Department\", \"Course_Code\", \"Course_Name\", \"Time\", \"Day\"};\n            DefaultTableModel model = new DefaultTableModel(null, columnNames);\n\n            while (rs.next()) {\n                // Get the day number from the database\n                int dayNumber = rs.getInt(\"Day\");\n\n                // Map the day number to the corresponding weekday name\n                String dayName = mapDayNumberToName(dayNumber);\n\n                model.addRow(new Object[]{\n                        rs.getString(\"Department\"),\n                        rs.getString(\"Course_Code\"),\n                        rs.getString(\"Course_Name\"),\n                        rs.getString(\"Time\"),\n                        dayName\n                });\n            }\n            timeTableTable.setModel(model);\n        } catch (Exception e) {\n            System.out.println(\"Error in display Time Table: \" + e.getMessage());\n        }\n    }\n\n    // Map day numbers to weekday names\n    private String mapDayNumberToName(int dayNumber) {\n        switch (dayNumber) {\n            case 1: return \"Monday\";\n            case 2: return \"Tuesday\";\n            case 3: return \"Wednesday\";\n            case 4: return \"Thursday\";\n            case 5: return \"Friday\";\n            default: return \"Unknown\";\n        }\n    }\n\n    // Add Notice titles to the combo box *****************\n\n    public void addNoticeTitlesToComboBox(){\n        con = DatabaseConnection.connect();\n\n        try{\n            Connection conn = DatabaseConnection.connect();\n            String sql = \"SELECT * FROM Notice\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n\n            selectTitleCombo.removeAllItems();\n\n            while (rs.next()) {\n                String title = rs.getString(\"Title\");\n                selectTitleCombo.addItem(title); // Add each title to the combo box\n                System.out.println(\"Title: \" + title);\n            }\n        }catch(Exception e){\n            System.out.println(\"Error in add Notice Titles To ComboBox: \" + e.getMessage());\n        }\n    }\n\n    public void displayNoticeContent(String title) {\n        try {\n            noticeTxtArea.setText(\"\");\n            // Establish connection to the database to get the NoticeId based on the title\n            Connection con = DatabaseConnection.connect();\n            String sql = \"SELECT Notice_id FROM Notice WHERE Title = ?\";\n            PreparedStatement pstmt = con.prepareStatement(sql);\n            pstmt.setString(1, title);\n            ResultSet rs = pstmt.executeQuery();\n\n            if (rs.next()) {\n                String noticeId = rs.getString(\"Notice_id\");\n\n                // Read content from the corresponding text file (e.g., notice_1.txt)\n                File noticeFile = new File(\"notices/notice_\" + noticeId + \".txt\");\n                System.out.println(\"noticeFile: \" + noticeId+ \" Displayed\");\n                BufferedReader reader = new BufferedReader(new FileReader(noticeFile));\n                StringBuilder content = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    content.append(line).append(\"\\n\");\n                }\n\n                // Display the content in the JTextArea\n                noticeTxtArea.setText(content.toString());\n            }\n        } catch (SQLException | IOException e) {\n            System.out.println(\"Error in display Notice Content: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    //************ Medical *******************\n\n    public void viewMedicalStatus(){\n        Connection con = DatabaseConnection.connect();\n        try{\n            System.out.println(\"LoggedIn Username = [\" + Session.loggedInUsername + \"]\");\n            String sql = \"SELECT med.Medical_id, med.Course_code, med.Week_No, med.Day_No, med.Status, c.Course_Name \" +\n                    \"FROM Medical med \" +\n                    \"JOIN Course c ON med.Course_code = c.Course_code \" +\n                    \"JOIN Student s ON med.Stu_id = s.Stu_id \" +\n                    \"JOIN User u ON s.UserName = u.UserName \" +\n                    \"WHERE u.UserName = ?\";\n\n\n            PreparedStatement pstmt = con.prepareStatement(sql);\n            pstmt.setString(1, Session.loggedInUsername);\n\n            System.out.println(\"Executing query: \" + sql);\n            ResultSet rs = pstmt.executeQuery();\n\n            DefaultTableModel model = (DefaultTableModel) mediDetailsTable.getModel();\n            model.setRowCount(0);\n            int count = 0;\n            boolean found = false;\n            while (rs.next()) {\n                count++;\n                found = true;\n                String medId = rs.getString(\"Medical_id\");\n                String courseCode = rs.getString(\"Course_code\");\n                String courseName = rs.getString(\"Course_Name\");\n                String weekNo = rs.getString(\"Week_No\");\n                String dayNo = rs.getString(\"Day_No\");\n                String status = rs.getString(\"Status\");\n\n                model.addRow(new Object[]{medId, courseCode, courseName, weekNo, dayNo, status});\n            }\n            System.out.println(\"Total Records Found: \" + count);\n//            if(count == 0){\n//                JOptionPane.showMessageDialog(null, \"No Records Found\");\n//                System.out.println(\"No Records Found\");\n//            }\n            if(!found){\n                JOptionPane.showMessageDialog(null, \"No Medical Found\");\n                System.out.println(\"No Medical Found\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error in view Medical Status: \" + e.getMessage());\n        }\n    }\n\n// ************* Attendance **********************\n\n    public void viewAttendance(String Course_code) {\n        Connection con = DatabaseConnection.connect();\n        try {\n            System.out.println(\"LoggedIn Username = [\" + Session.loggedInUsername + \"]\");\n            String sql = \"SELECT a.Attendance_id, a.Lec_hour, a.Week_No, a.Day_No, a.Status, a.Course_type \" +\n                    \"FROM Attendance a \" +\n                    \"JOIN Course c ON c.Course_code = a.Course_code \" +\n                    \"JOIN Student s ON a.Stu_id = s.Stu_id \" +\n                    \"JOIN User u ON s.UserName = u.UserName \" +\n                    \"WHERE u.UserName = ? AND a.Course_code = ?\";\n\n            PreparedStatement pstmt = con.prepareStatement(sql);\n            pstmt.setString(1, Session.loggedInUsername);\n            pstmt.setString(2, Course_code);\n\n            System.out.println(\"Executing query: \" + sql);\n\n            ResultSet rs = pstmt.executeQuery();\n\n            DefaultTableModel model = new DefaultTableModel(\n                    new String[]{\"Attendance Id\", \"Lectur Hour\", \"Week No\", \"Day No\", \"Status\", \"Course Type\"}, 0\n            );\n\n            while (rs.next()) {\n                String attendanceID = rs.getString(\"Attendance_id\");\n                String lecHour = rs.getString(\"Lec_hour\");\n                String weekNo = rs.getString(\"Week_No\");\n                String dayNo = rs.getString(\"Day_No\");\n                String status = rs.getString(\"Status\");\n                String courseType = rs.getString(\"Course_type\");\n\n                model.addRow(new Object[]{attendanceID, lecHour, weekNo, dayNo, status, courseType});\n\n            }\n            attTable.setModel(model);\n\n        } catch (Exception e) {\n            System.out.println(\"Error in view Attendance Eligibility: \" + e.getMessage());\n        }\n    }\n\n    public void showProfilePicture(JLabel imageLbl) {\n        Connection con = DatabaseConnection.connect();\n        try {\n            String sql = \"SELECT Profile_pic FROM User WHERE UserName = ?\";\n            PreparedStatement pst = con.prepareStatement(sql);\n            pst.setString(1, Session.loggedInUsername);\n            ResultSet rs = pst.executeQuery();\n\n            if (rs.next()) {\n                String fileName = rs.getString(\"Profile_pic\");\n\n                // If no profile picture set in DB, use default\n                if (fileName == null || fileName.trim().isEmpty()) {\n                    fileName = \"default.png\";\n                }\n\n                String path = \"user_Pro_Pic/\" + fileName;\n                File imageFile = new File(path);\n\n                // If image file does not exist, fallback to default image\n                if (!imageFile.exists()) {\n                    path = \"user_Pro_Pic/default.png\";\n                }\n\n                // Load and Resize Image to fit JLabel\n                ImageIcon imageIcon = new ImageIcon(path);\n\n                // Get JLabel size (designed from GUI builder)\n                int width = imageLbl.getWidth();\n                int height = imageLbl.getHeight();\n\n                // Default size safety check (in case label not ready)\n                if (width == 0 || height == 0) {\n                    width = 150;\n                    height = 150;\n                }\n\n                Image image = imageIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);\n                imageLbl.setIcon(new ImageIcon(image));\n                imageLbl.repaint(); // Refresh label to show updated image\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error in showProfilePicture: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    public void deleteProfilePicture(JLabel imageLbl) {\n        Connection con = DatabaseConnection.connect();\n        try{\n            String sql = \"UPDATE User SET Profile_pic = NULL WHERE UserName = ?\";\n            PreparedStatement pst = con.prepareStatement(sql);\n            pst.setString(1, Session.loggedInUsername);\n\n            int result = pst.executeUpdate();\n\n            if (result > 0) {\n                // Set default image after deletion\n                String path = \"JavaMiniProject/user_Pro_Pic/default.png\";\n\n                // Get label size\n                int width = imageLbl.getWidth();\n                int height = imageLbl.getHeight();\n\n                if (width == 0 || height == 0) {\n                    width = 150;\n                    height = 150;\n                }\n\n                ImageIcon imageIcon = new ImageIcon(path);\n                Image image = imageIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);\n                imageLbl.setIcon(new ImageIcon(image));\n                imageLbl.repaint();  // Refresh label\n\n                System.out.println(\"Profile picture deleted successfully.\");\n            } else {\n                System.out.println(\"No profile picture was found or username invalid.\");\n            }\n\n        } catch (Exception e) {\n            System.out.println(\"Error in deleteProfilePicture: \" + e.getMessage());\n        }\n    }\n\n    public List<String> getAllCourseCodes() {\n        List<String> courseCodes = new ArrayList<>();\n        Connection con = DatabaseConnection.connect();\n        try {\n            String sql = \"SELECT Course_code FROM Course\";\n            PreparedStatement pstmt = con.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n\n            while (rs.next()) {\n                courseCodes.add(rs.getString(\"Course_code\"));\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error in get All CourseCodes: \" + e.getMessage());\n        }\n        return courseCodes;\n    }\n\n    public void viewCourseMaterials(String courseCode) {\n        Connection con = DatabaseConnection.connect();\n        try{\n            String sql = \"SELECT Course_Material FROM Course WHERE Course_Name = ?\";\n            PreparedStatement pstmt = con.prepareStatement(sql);\n//            pstmt.setString(1, Session.loggedInUsername);\n            pstmt.setString(1, courseCode);\n            ResultSet rs = pstmt.executeQuery();\n            if (rs.next()) {\n                String materialLink = rs.getString(\"Course_Material\");\n                if(materialLink != null && !materialLink.isEmpty()) {\n                    // Show link or open browser\n                    JOptionPane.showMessageDialog(null, \"Download Course Material here:\\n\" + materialLink);\n                    // You can also open directly\n                    // Desktop.getDesktop().browse(new URI(materialLink));\n                } else {\n                    JOptionPane.showMessageDialog(null, \"No course material uploaded for this course.\");\n                }\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error in view Course Materials: \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        new StuHome();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/student/StuHome.java b/src/student/StuHome.java
--- a/src/student/StuHome.java	(revision 9806ab11c8be08ff22efec49797379806b8f430f)
+++ b/src/student/StuHome.java	(date 1745320808069)
@@ -513,8 +513,9 @@
     }
 
     public void displayNoticeContent(String title) {
-        try {
-            noticeTxtArea.setText("");
+        noticeTxtArea.setText("");
+        try {
+
             // Establish connection to the database to get the NoticeId based on the title
             Connection con = DatabaseConnection.connect();
             String sql = "SELECT Notice_id FROM Notice WHERE Title = ?";
@@ -528,19 +529,27 @@
                 // Read content from the corresponding text file (e.g., notice_1.txt)
                 File noticeFile = new File("notices/notice_" + noticeId + ".txt");
                 System.out.println("noticeFile: " + noticeId+ " Displayed");
-                BufferedReader reader = new BufferedReader(new FileReader(noticeFile));
-                StringBuilder content = new StringBuilder();
-                String line;
-                while ((line = reader.readLine()) != null) {
-                    content.append(line).append("\n");
-                }
-
-                // Display the content in the JTextArea
-                noticeTxtArea.setText(content.toString());
+
+                try(BufferedReader reader = new BufferedReader(new FileReader(noticeFile))){
+                    StringBuilder content = new StringBuilder();
+
+                    String line;
+                    while ((line = reader.readLine()) != null) {
+                        content.append(line).append("\n");
+                    }
+                    // Display the content in the JTextArea
+                    noticeTxtArea.setText(content.toString());
+                }
+//                noticeTxtArea.setText(content.toString());
+            }else {
+                noticeTxtArea.setText("Notice not found");
             }
-        } catch (SQLException | IOException e) {
+        } catch (SQLException e) {
             System.out.println("Error in display Notice Content: " + e.getMessage());
             e.printStackTrace();
+        }catch (IOException e) {
+            System.out.println("File error in display Notice Content: " + e.getMessage());
+            e.printStackTrace();
         }
     }
 
